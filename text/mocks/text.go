// Code generated by MockGen. DO NOT EDIT.
// Source: text.go

// Package mock_text is a generated GoMock package.
package mock_text

import (
	context "context"
	text "github.com/bounoable/translator/text"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockRanger is a mock of Ranger interface
type MockRanger struct {
	ctrl     *gomock.Controller
	recorder *MockRangerMockRecorder
}

// MockRangerMockRecorder is the mock recorder for MockRanger
type MockRangerMockRecorder struct {
	mock *MockRanger
}

// NewMockRanger creates a new mock instance
func NewMockRanger(ctrl *gomock.Controller) *MockRanger {
	mock := &MockRanger{ctrl: ctrl}
	mock.recorder = &MockRangerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRanger) EXPECT() *MockRangerMockRecorder {
	return m.recorder
}

// Ranges mocks base method
func (m *MockRanger) Ranges(arg0 context.Context, arg1 io.Reader) (<-chan text.Range, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ranges", arg0, arg1)
	ret0, _ := ret[0].(<-chan text.Range)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// Ranges indicates an expected call of Ranges
func (mr *MockRangerMockRecorder) Ranges(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ranges", reflect.TypeOf((*MockRanger)(nil).Ranges), arg0, arg1)
}
